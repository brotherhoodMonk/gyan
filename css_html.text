1. Explain the three main ways to apply CSS styles to a web page.
You will, of course, need to know how to add CSS to a page, and there are three main ways:

Using the inline style attribute on an element
Using a <style> block in the <head> section of your HTML
Loading an external CSS file using the <link> tag

2. Could you describe the different kinds of selectors?
A selector in CSS is the bit before the curly bracket, for
example, body or .nav-item, that selects the content you want to style.
The different kinds of selectors include tags, classes & IDs:

3. display: block, inline, inline-block

respect left & right margins and padding, but not top & bottom
cannot have a width and height set
allow other elements to sit to their left and right.
see very important side notes on this here.

Block elements:

respect all of those
force a line break after the block element
acquires full-width if width not defined
Inline-block elements:

allow other elements to sit to their left and right
respect top & bottom margins and padding
respect height and width

position: fixed always fixates an element to some position within its scrolling
container or the viewport. No matter how you scroll its container, it will
remain in the exact same position and not affect the flow of other elements
within the container.

Without going into specific details, position: sticky basically acts like
position: relative until an element is scrolled beyond a specific offset, in
 which case it turns into position: fixed, causing the element to "stick" to
 its position instead of being scrolled out of view. It eventually gets unstuck
 as it gets scrolled back toward its original position. At least, that's how I
  understand it in theory.

transition-
  These transition properties allow elements to change values over a specified duration,
   animating the property changes, rather than having them occur immediately. Here is a
    simple example that transitions the background color of a <div> element on :hover:

    .example {
    transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];
}
The transition-timing-function property specifies the speed curve of the transition effect.

The transition-timing-function property can have the following values:

ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
linear - specifies a transition effect with the same speed from start to end
ease-in - specifies a transition effect with a slow start
ease-out - specifies a transition effect with a slow end
ease-in-out - specifies a transition effect with a slow start and end
cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function


3.<!DOCTYPE>
 The <!DOCTYPE> declaration must be the very first thing in your HTML document,
  before the <html> tag.

The <!DOCTYPE> declaration is not an HTML tag; it is an instruction to the
web browser about what version of HTML the page is written in.
HTML 5- <!DOCTYPE html>
HTML 4.01 Strict
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">


3. Explain the three main ways to target elements.
Now, in order to style certain elements on the page, you need to know how
 to specify those elements. There are three main ways to target something:

By tag, e.g. you can target the body or p or span
By the class you’ve specified in your HTML. For example, if you have three list items with the class nav-item you can target them with .nav-item
By the ID you’ve specified in your HTML. For example, if you have a link with the ID home-button you can target it with #home-button



How do you target something inside or around another element?
Sometimes you need to target something that’s next to something else or target something only if it’s inside a particular container. Luckily, that’s easy!

If you’re wanting to style occurrences of a certain class inside another class, you can write the following:

.nav .nav-item { ... }
The above targets any .nav-item inside .nav. If you only want those that are immediately inside the .nav as opposed to any level deep, you can add the > character, like so:

.nav > .nav-item { ... }
Want to target a button only if it’s next to another button? The + character has got you covered:

.button + .button { ... }

4.
HTML5 Semantic Elements
Semantic HTML or semantic markup is HTML that introduces meaning to the web page rather than just
presentation.
Semantic HTML elements clearly describe it’s meaning in a human and machine readable way.
 Elements such as <header>,
<footer> and <article> are all considered semantic because they accurately describe the
purpose of the element and the type of content that is inside them.
The semantic elements added in HTML5 are:

    <article>
    <aside>
    <details>
    <figcaption>
    <figure>
    <footer>
    <header>
    <main>
    <mark>
    <nav>
    <section>
    <summary>
    <time>

5. What are pseudo elements and what are they used for?
Pseudo elements are used to style particular parts of an element, rather than the whole
thing.
 For example, you can use it to style the first line or first letter of a paragraph,
 text you’ve selected,
 or you can use it to insert text or shapes before or after an element.

They always start with a double colon - although a single colon is still allowed for
backwards compatibility - and they look like this:

p::first-line { ... }
span::first-letter { ... }
::selection { ... }
.header::after { ... }
.tooltip::before { ... }

6. What are pseudo classes and what are they used for?
Pseudo classes are similar to pseudo elements, but instead of styling a part of an element,
they apply styles when an element is in a certain state. For example, you could style a button differently based on whether
the user has their mouse pointer over it, or when they click the button.

Another common use case is to style only certain occurrences of elements in a row.
For example, styling the first tab in a series of tabs, or every second tab.

They all start with a single colon and look like this:
.link:hover { ... }
.link:active { ... }
.tab:first-child { ... }
.tab:last-child { ... }
.avatar:nth-child(2n) { ... }


7. What are attributes and how are they used?
You already know about classes, which means you already know about attributes,
seeing as a class is just one of the many
 attributes that HTML tags can have. There are a few that apply to all tags,
  like class and id, but a lot of tags have
  their own ones. For example, input tags can have a type (text, number, radio, etc)
  and a tags can have href.

You can target elements with particular attributes by using square brackets: [attribute="value"]. For example, you can target all input fields that are of type radio like so:

input[type="radio"] {
    background-color: #eee;
}

Specificity


If you’ve spent any time wrangling CSS, you’ve likely come across the tricky rules around
 specificity.
What that means is which rules override others simply by being more specific.

The following list displays the order of specificity, from low to high:

Type selectors (e.g. h1) and pseudo-elements (e.g. ::before)
Class selectors (e.g. .nav-item), attributes selectors (e.g. [type="radio"]) and
 pseudo-classes (e.g. :hover)
ID selectors (e.g. #example)

A tag references an HTML tag
A class references the class attribute on an HTML tag
Likewise, an ID references the id attribute on an HTML tag

9. Should you use !important

What !important does, is make that particular style have the highest specificity possible.
Nothing else can override it, apart from another !important. You might be able to see where
 this is going,
 but once you start using them, you’ll almost certainly get into a position where you
 need to override a
 rule marked as !important, which forces you to use another one. And so the cycle continues.

/* high specificity */
.large .navigation.navigation-large {
    font-size: 2em;
}

/* will override the above, but it's dangerous! */
.navigation {
    font-size: 3em !important;
}

cm	centimeters
mm	millimeters
in	inches (1in = 96px = 2.54cm)
px *	pixels (1px = 1/96th of 1in)
pt	points (1pt = 1/72 of 1in)
pc	picas (1pc = 12 pt)

em	Relative to the font-size of the element (2em means 2 times the size of the
current font)
ex	Relative to the x-height of the current font (rarely used)
ch	Relative to width of the "0" (zero)
rem	Relative to font-size of the root element
vw	Relative to 1% of the width of the viewport*
vh	Relative to 1% of the height of the viewport*
vmin	Relative to 1% of viewport's* smaller dimension
vmax	Relative to 1% of viewport's* larger dimension

%	Relative to the parent element
The CSS Box Model
Padding adds bulk to your element, in between the border and the element. This means
 that if your element has
a background color, that color will also fill the padding.

Margin adds empty space around your element. That means that the aforementioned background color will not fill the margin.

====em vs pix;
12. What are web safe fonts and fallback fonts?
Not all operating systems and browsers have the same fonts installed.
 Web safe fonts are fonts that are commonly pre-installed
 on many computer systems, such as Arial and Times New Roman.
 In case the browser or operating system doesn’t recognize the first
 font you set (e.g. Ubuntu), you should choose a web safe fallback font to display (e.g. Arial), followed by a generic font family
  (e.g. sans-serif). If your fallback font doesn’t display either,
  the browser can pick a generic font in the sans-serif family.

13. How would you use media queries in a mobile-first approach?
There’s no way to avoid these nowadays, everyone expects their website to work on
mobile devices, even if they don’t specifically ask for it.

The most common approach is the mobile-first one. All styles outside of media queries are
targeted at mobile devices.
Then, through progressively larger media queries, you can style larger screens one
step at a time.

/* mobile styles */
body {
    font-size: 1em;
}

/* desktop styles */
@media only screen and (min-width: 768px) {
    body {
        font-size: 1.5em;
    }
}


14. How do you handle browser differences in your user base?
In the past few years, browsers have come a long way. Modern browsers update automatically
 and provide pretty good feature coverage.
There are still differences between browsers, and while some support certain features
(like certain CSS styles), others don’t
 or display them differently.

Your biggest concern is legacy browsers. You may have seen jokes about Internet Explorer,
and while the newer versions aren’t as bad, there are still a lot of people using older
versions. These days it’s not uncommon to still support IE9, sometimes even IE8.

This can severely limit the kind of styles you can use, though most can be approximated
using fallback styles. The @supports query in CSS can be very useful to scan if the user’s
 current browser has a certain feature. If they do, you can apply those styles without worry. If not, you can have some fallback styles as a backup.


15. Do you use any tools for browser support?
One of my favourite online tools is caniuse.com. It’s a website that tells you exactly which browsers support which features,
including CSS and JavaScript, which can be extremely helpful in finding out what you can
and can’t use!

Flexbox is a very useful layout tool, especially for smaller areas within the site.
 Its main features are to align
 items in horizontal or vertical axes, space them out automatically, invert the order
  in which they’re displayed,
 along with a few other layout options.

CSS Grid is more of a layout tool for the entire page. While Flexbox excels in laying
out items along a single axis,
 Grid is better for layouts with both horizontal and vertical axes, i.e. grids!

Preprocessor-
A CSS preprocessor is a program that lets you generate CSS from the preprocessor's
own unique syntax.
There are many CSS preprocessors to choose from, however most CSS preprocessors will add
 some features that don't
exist in pure CSS, such as mixin, nesting selector, inheritance selector, and so on.
 These features make the CSS
 structure more readable and easier to maintain.

A preprocessor is a program that takes one type of data and converts it to another type of
 data. In the case of HTML and CSS,
 some of the more popular preprocessor languages include Haml and Sass. Haml is processed
 into HTML and Sass is processed into CSS.
In time writing HTML and CSS may feel a bit taxing, requiring a lot of the same tasks to
 be completed over and over again.
 Tasks such as closing tags in HTML or repetitively having to looking up hexadecimal
 color values in CSS.

These different tasks, while commonly small, do add up to quite a bit of inefficiency.
Fortunately these, and a handful of other inefficiencies, have been recognized and
preprocessor solutions have risen to the challenge.

CSS on its own can be fun, but stylesheets are getting larger, more complex, and harder to maintain.
This is where a preprocessor can help. Sass lets you use features that don't exist in CSS
yet like variables,
nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again.

scss
$font-stack:    Helvetica, sans-serif;
$primary-color: #333;

Think of variables as a way to store information that you want to reuse throughout your
 stylesheet.
You can store things like colors, font stacks, or any CSS value you think you'll want to reuse. Sass uses the $ symbol
to make something a variable. Here's an example:
body {
  font: 100% $font-stack;
  color: $primary-color;
}
Partials
You can create partial Sass files that contain little snippets of CSS that you can include
 in other Sass files.
This is a great way to modularize your CSS and help keep things easier to maintain.
A partial is simply a Sass file named
with a leading underscore. You might name it something like _partial.scss.
The underscore lets Sass know that the file is
only a partial file and that it should not be generated into a CSS file.
Sass partials are used with the @import directive.

Nesting
When writing HTML you've probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn't.

Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware
 that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice.

https://sass-lang.com/guide


18. What is file splitting and why should you use it?
File splitting helps organize your CSS into multiple files, decreasing page load time and making things easier to manage.
 If you’re working with any of the preprocessors above, you can start splitting up your files.

How you decide to split them up is up to you, but it can be useful to separate files by component. For example, you can have all
your button styles in a file called _buttons.scss or all your header-specific styles in a file called _header.scss. Then, in your main file, say _app.scss, you can import those files by writing @import 'buttons';

This way you can also create separate stylesheets for separate areas of your website, where you might not need all styles. For example, if you have a web app, you probably don’t need to load all styles when people land on your homepage, when they haven’t even logged into your app yet. Simply create another file and import only those styles you need.

19. What are variables used for?
Variables are super useful for things like colors, fonts, font sizes, and certain dimensions, as you can be sure you’re
always using the same ones, not 4 different versions of roughly the same color.


Mixins
Some things in CSS are a bit tedious to write, especially with CSS3 and the many vendor prefixes that exist.
A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. You can even pass
in values to make your mixin more flexible. A good use of a mixin is for vendor prefixes. Here's an example for transform.

SCSSSassCSS
SCSS SYNTAX
@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}
.box { @include transform(rotate(30deg)); }
CSS OUTPUT
.box {
  -webkit-transform: rotate(30deg);
  -ms-transform: rotate(30deg);
  transform: rotate(30deg);
}

To create a mixin you use the @mixin directive and give it a name. We've named our mixin transform.
We're also using the variable $property inside the parentheses so we can pass in a transform of whatever we want.
 After you create your mixin, you can then use it as a CSS declaration starting with @include followed by the name of the mixin.



10) What is semantic HTML?
Semantic HTML is a coding style. It is the use of HTML markup to reinforce the semantics or
meaning of the content.
For example: In semantic HTML <b> </b> tag is not used for bold statement as well as <i> </i> tag is used for italic.
Instead of these we use <strong></strong> and <em></em> tags.



4) How do you keep list elements straight in an HTML file?
You can keep the list elements straight by using indents.

18) Is it possible to change the color of the bullet?
The color of the bullet is always the color of the first text of the list. So, if you want to change the color of the bullet, you must change the color of the text.


19) Explain the layout of HTML?
HTML layout specifies a way in which the web page is arranged.


HTML Layouts
Every website has a specific layout to display content in a specific manner.

Following are different HTML5 elements which are used to define the different parts of a webpage.


23) What are empty elements?
HTML elements with no content are called empty elements. For example: <br>, <hr> etc.

24) What is the use of a span tag? Give one example.
The span tag is used for following things:

For adding color on text
For adding background on text
Highlight any color text


29) What is the float property of CSS?
The CSS float property is used to move the image to the right or left along with the texts to be wrapped around it.
 It doesn't change the property of the elements used before it.

To understand its purpose and origin, let's take a look at its print display. In the print display,
an image is set into the page such that text wraps around it as needed.

CSS Float Print Layout
Its web layout is also just similar to print layout.

CSS Float Web Layout More details...


Z index:
z-index
Defines the order of the elements on the z-axis.
It only works on positioned elements (anything apart from static).
The z-index CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.
Only work with the position prperty.
The z-index property is used to displace elements on the z axis i.e in or out of the screen.
 It is used to define the order of elements if they overlap on each other.
auto: The stack order is equal to that of the parent(default).
number: The stack order depends in the number.
initial: Sets the property to its default value.
inherit: Inherits the property from the parent element.

 Flex vs Grid-
 “The main idea behind the flex layout is to give the container the ability to alter its items’ width/height
 (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes).”
 A flex container expands its items to fill available free space or shrinks them to prevent overflow. It provides a
  better arrangement of all of the page elements. It is a one-dimensional layout model that offers space allocation between
  items in an interface and robust alignment capabilities.


 Main Axis & Cross Axis
Flexbox features properties that align and justifycontent along one axis or the other.

The main axis is defined by flex-direction, which has fourpossible values:rowrow-reversecolumncolumn-reverse

CSS Grid vs Flexbox
CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a one-dimensional system (either in a column or a row).
A core difference between CSS Grid and Flexbox is that — CSS Grid’s approach is layout-first while Flexbox’ approach is content-first.
If you are well aware of your content before making layout, then blindly opt for Flexbox and if not, opt for CSS Grid.
Flexbox layout is most appropriate to the components of an application (as most of them are fundamentally linear),
 and small-scale layouts, while the Grid layout is intended for larger scale layouts which aren’t linear in their design.
If you only need to define a layout as a row or a column, then you probably need flexbox.
If you want to define a grid and fit content into it in two dimensions — you need the grid.




<header>: It is used to define a header for a document or a section.
<nav>: It is used to define a container for navigation links
<section>: It is used to define a section in a document
<article>: It is used to define an independent, self-contained article
<aside>: It is used to define content aside from the content (like a sidebar)
<footer>: It is used to define a footer for a document or a section


All the HTML elements can be categorized into two categories (a) Block Level Elements (b)Inline Elements.
Block Elements

Block elements appear on the screen as if they have a
line break before and after them. For example,
 the <p>, <h1>, <ul>, <ol>,
 <dl>, <pre>, <hr />, <blockquote>, and
 <address> elements are all block level elements.
 They all start on their own new line, and anything that f
 ollows them appears on its own new line.

 Inline Elements

Inline elements, on the other hand, can appear within sentences and
do not have to appear on a new line of their own. The <b>, <i>, <u>, <em>, <strong>, <sup>,
<sub>, <big>, <small>, <li>, <ins>, <del>, <code>, <cite>, <dfn>, <kbd>, and <var>
elements are all inline elements.

Define different cascading methods that can be used inside the cascading order.

Answer: Cascading order is itself a sorting method that allows many other different sorting methods:

#1) Sort by origin: There are some rules which can provide the alternate way which can be defined as:

Normal weight of style sheet of a particular provider will be overridden by the increased weight of the user's style sheet.
Stylesheet rules of a particular user will be overridden by the normal width of the provider’s style sheet.
#2) Sort by selector's specificity: Less specific selector is been overridden by the more specific selector.

Example, A Contextual selector is less specific in comparison to the ID selector which is a more specific one and with that contextual selector is been overridden by the ID selector.

#3) Sort by order specified: This comes in the scenario when the two selectors are same in weight and the other properties than the specification which will be seen for overriding.

Example:

All other styles will be seen overridden if the style attribute is used for inline style.

And also if the link element is used for external style, then it will override the imported style.

Q #29) Define ‘important’ declarations used in CSS.

Answer: Important declarations are defined as that declaration which is having more importance than the normal declaration.

While executing, these declarations override the declaration which is having less importance.

Example, if there are two users Having important declaration then one of the declarations will override the declaration of another user.

For Example:

Body {background: #FF00FF !important; color: blue}

In this body background has more weight than the color.

Static- This is the default for every single page element. Different elements don't have different
default values for positioning, they all start out as static. Static doesn't mean much;
it just means that the element will flow into the page as it normally would.

Relative. This type of positioning is probably the most confusing and misused.
What it really means is "relative to itself". If you set position: relative;
on an element but no other positioning attributes (top, left, bottom or right),
it will have no effect on it's positioning at all, it will be exactly as it would be
 if you left it as position: static; But if you do give it some other positioning attribute,
 say, top: 10px;, it will shift its position 10 pixels down from where it would normally be.

 There are two other things that happen when you set position: relative; on an element that
 you should be aware of. One is that it introduces the ability to use z-index on that element,
  which doesn't really work with statically positioned elements. Even if you don't set a z-index
  value, this element will now appear on top of any other statically positioned element.
  You can't fight it by setting a higher z-index value on a statically positioned element.
  The other thing that happens is it limits the scope of absolutely positioned child elements.
   Any element that is a child of the relatively positioned element can be absolutely positioned
   within that block.

   Absolute. This is a very powerful type of positioning that allows you to literally place any
   page element exactly where you want it. You use the positioning attributes top, left, bottom.
   and right to set the location. Remember that these values will be relative to the next parent
   element with relative (or absolute) positioning. If there is no such parent, it will default
   all the way back up to the <html> element itself meaning it will be placed relative to the
   page itself.

The trade-off (and most important thing to remember) about absolute positioning is that these
elements are removed from the flow of elements on the page. An element with this type of positioning
is not affected by other elements and it doesn't affect other elements. This is a serious thing to
consider every time you use absolute positioning. Its overuse or improper use can limit the flexibility
 of your site.

 Fixed. This type of positioning is fairly rare but certainly has its uses. A fixed position element
 is positioned relative to the viewport, or the browser window itself. The viewport doesn't change
 when the window is scrolled, so a fixed positioned element will stay right where it is when the page is
 scrolled, creating an effect a bit like the old school "frames"

 25) What is CSS opacity?

Answer: It is the property which elaborates the transparency of an element.

By this property, we can transparent the image that can take the values from 0.0-1.0, if the value is
 lower then the image is more transparent. IE8 and earlier version of the browser can take the values from 0-100.

img {
opacity: 0.6;
filter: alpha(opacity=60); /* For IE8 and earlier */}

Q #24) Explain the concept of pseudo-elements in CSS.

Answer: It is a feature of CSS which is used to style the given parts of an element.

For Example, we can style the first letter or line of an HTML element.

selector::pseudo-element {
property:value;
}


#23) What is a CSS pseudo class?

Answer: It is a class which is used to define a special state of an HTML element.

This class can be used by styling an element when a user snooped over it and also
it can style an HTML element when it gets the focus.

selector:pseudo-class {
property:value;
}
ex- :hover,:active, :focus- :checked, :disabled,
:link


Q #24) Explain the concept of pseudo-elements in CSS.

Answer: It is a feature of CSS which is used to style the given parts of an element.

For Example, we can style the first letter or line of an HTML element.

selector::pseudo-element {
property:value;
}

::before ::afer ::firs-letter ::first-line ::selection

id & class
Id is a kind of element which uniquely assigns a name to a particular element whereas class
has an element with a certain set of properties which can be used for the complete block.
The id can be used as an element because it can uniquely identify it whereas class is
also defined to block the element and applies too many tags wherever it is used.
Id provides the restriction to use its properties to one specific element whereas in class the
inheritance is applied to a specific block or group of the element.


padding & margin
padding is the space between the content and the border, whereas margin is the
space outside the border. Here's an image I found from a quick Google search,
that illustrates this idea.

Margin is applied to the outside of you element hence effecting how far your
element is away from other elements.


Padding is applied to the inside of your element hence effecting how far
your element's content is away from the border.

Q #17) What is CSS flexbox?

Answer: It allows you to design a flexible responsive layout structure
without using any float or positioning property of CSS. To use CSS flexbox
you need to define a flex container initially.

flex-direction
flex-wrap
flex-flow
justify-content
align-items
align-content

Q #16) What are gradients in CSS?

Answer: It is a property of CSS which allows you to display a smooth transformation between
two or more than two specified colors.

There are two types of gradients that are present in CSS. They are:

Linear gradient
Radial Gradient

Q #15) How will you add border images to an HTML element?

Answer: We can set the image to be used as the border image alongside an element by using
the property of CSS “border-image”.

Example:

#borderimg {
    border: 15px solid transparent;
    padding: 20px;
    border-image: url(border.png) 30 round;
}

specificity-


If there are two or more conflicting CSS rules that point to the same element, the browser
 follows some rules to determine which one is most specific and therefore wins out.

Think of specificity as a score/rank that determines which style declarations are ultimately
applied to an element.

The universal selector (*) has low specificity, while ID selectors are highly specific!

Specificity Hierarchy

Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:

Inline styles - An inline style is attached directly to the element to be styled. Example: <h1 style="color: #ffffff;">.

IDs - An ID is a unique identifier for the page elements, such as #navbar.

Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.

Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.

Memorize how to calculate specificity!

Start at 0, add 1000 for style attribute, add 100 for each ID,
add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.


CSS Counters-
CSS counters are like "variables". The variable values can be incremented by CSS rules (which will track how many times they are used).

To work with CSS counters we will use the following properties:

    counter-reset - Creates or resets a counter
    counter-increment - Increments a counter value
    content - Inserts generated content
    counter() or counters() function - Adds the value of a counter to an element

    Explain the term Responsive web design.

Answer: It is a method in which we design and develop a web page according to the user
activities and conditions which are based on various components like the size of the screen, portability of the web page on different device etc.

Hence it is done by using different flexible layouts and grids

Q #9) Define CSS image scripts.

Answer: CSS image scripts is a group of images which is placed into one image.

It reduces the load time and request number to the server while projecting multiple
images into a single web page.

Explain the concept of Tweening.

Answer: Tweening is the process in which we create intermediate frames between two
images to get the appearance of the first image which develops into the second image.

It is mainly used for creating animation.

CSS Selectors

In CSS, selectors are patterns used to select the element(s) you want to style.

Use our CSS Selector Tester to demonstrate the different selectors.

.class
.class1.class2
#id
* 	* 	Selects all elements
:active
::after
::before

Q #6) What are the uses of embedded style sheet?

Answer: Embedded style sheet gives us the privilege to define styles at one place in an HTML document.

We can generate multiple classes using an embedded style sheet to use on multiple tag types of a web page and also there is no extra downloading required for importing the information.


Q #5) Why is the external style sheet useful?

Answer: External style sheet is very useful as we write all the styling codes in a single file and it can be used anywhere by just referencing the link of that external style sheet file.

So if we do any changes in that external file, then the changes can also be observed on the webpage. So we can say that it is very useful and it makes your work easy while working on larger files.


Q #4) Cite different types of CSS.

Answer: There are three types of CSS as mentioned below.

External – These are written in separate files.
Internal – These are cited at the top of the web page code document.
Inline – These are written right next to the text.

Q #3) Distinguish between CSS2 and CSS3.

Answer: There are several differences between CSS2 and CSS3.

CSS3 is divided into two various sections which are called as a module. Whereas in CSS2 everything accedes
into a single document with all the information in it.
CSS3 modules are supported almost on every browser and on the other hand modules of CSS and CSS2 are not supported in every browser.
In CSS3 we will find that many graphics related characteristics have been introduced like “Border-radius or box-shadow, flexbox.
In CSS3, a user can precise multiple background images on a webpage by using properties like background-image, background-position,
and background-repeat styles
