Joins-

statement is used to combine data or rows from two or more tables based on a common field between them

Different types of Joins are:

INNER JOIN
LEFT JOIN
RIGHT JOIN
FULL JOIN

INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies.
This keyword will create the result-set by combining all rows from both the tables where the condition satisfies
i.e value of the common field will be same.

LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the
table on the right side of join. The rows for which there is no matching row on right side, the result-set
will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.

RIGHT JOIN: RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join
 and matching rows for the table on the left side of join. The rows for which there is no matching row on left side, the result-set
 will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.Syntax:

FULL JOIN: FULL JOIN creates the result-set by combining result of both LEFT JOIN and RIGHT JOIN. The result-set will contain all
 the rows from both the tables. The rows for which there is no matching, the result-set will contain NULL values.
 Syntax:

===
index=

An index is a schema object.
It is used by the server to speed up the retrieval of rows by using a pointer.
It can reduce disk I/O(input/output) by using a rapid path access method to locate data quickly.
 An index helps to speed up select queries and where clauses, but it slows down data input,
  with the update and the insert statements.

  An index is used to speed up searching in the database.w
  An index can be used to efficiently find all rows matching some column in your query and then walk through only that subset of the table to find
   exact matches. If you don't have indexes on any column in the WHERE clause, the SQL server has to walk through the whole table
   and check every row to see if it matches, which may be a slow operation on big tables

  CREATE INDEX index ON TABLE column;

 1. Clustered –
Clustered index is the type of indexing that established a physical shorting order of rows.
Suppose you have a table Student_info which contains ROLL_NO as a primary key than
Clustered index which is self created on that primary key will short the Student_info
 table as per ROLL_NO. Clustered index is like Dictionary, in the dictionary shorting
  order is alphabetical there is no separate index page.

  2. Non-clustered:
The Non-Clustered index is an index structure separate from the data stored in a
table that reorders one or more selected columns. The non-clustered index is
created to improve the performance of frequently used queries not covered by
 clustered index. It’s like a textbook, the index page is created separately
 . at the beginning of that book.
==
SQL Server Stored Procedures
A SQL Server stored procedure groups one or more Transact-SQL statements into a
 logical unit and is stored as an object in the Database Server. When a stored
  procedure is called at the first time, SQL Server creates an execution plan
  and stores it in the plan cache. In the subsequent executions of the stored
  procedure, SQL Server reuses the plan so that the stored procedure can execute
  very fast with reliable performance.

  CREATE PROCEDURE procedure_name
AS
sql_statement
GO;
EXEC procedure_name;

advantages-
Maintainability
Because scripts are in one location, updates and tracking of dependencies based on schema changes becomes easier
Testing
Can be tested independent of the application
Isolation of Business Rules
Having Stored Procedures in one location means that there’s no confusion of having business rules spread over potentially disparate code files in the application
Speed / Optimization
Stored procedures are cached on the server
Execution plans for the process are easily reviewable without having to run the application
Utilization of Set-based Processing
The power of SQL is its ability to quickly and efficiently perform set-based processing on large amounts of data; the coding equivalent is usually iterative looping, which is generally much slower
Security
Limit direct access to tables via defined roles in the database
Provide an “interface” to the underlying data structure so that all implementation and even the data itself is shielded.
Securing just the data and the code that accesses it is easier than applying that security within the application code itself
===
Triggers
A SQL trigger is a set of  SQL statements stored in the database catalog.
A SQL trigger is executed or fired whenever an event associated with a table occurs e.g.,
  insert, update or delete.
A SQL trigger is a special type of stored procedure. It is special because it is not
called directly like a stored procedure. The main difference between a trigger and a
stored procedure is that a trigger is called automatically when a data modification
event is made against a table whereas a stored procedure must be called explicitly.
===
RelationShips
Relationships are defined on the basis of matching key columns. In SQL server, these relationships
are defined using Primary Key-Foreign Key
 constraints. A link is created between two tables where the primary key of one table is associated
 with the foreign key of another
  table using database relationships.

  Types of Relationships
a. One-One Relationship (1-1 Relationship)
b. One-Many Relationship (1-M Relationship)
c. Many-Many Relationship (M-M Relationship)
1. One-One Relationship (1-1 Relationship)
One-to-One (1-1) relationship is defined as the relationship between two tables where both the tables should be
associated with each other based on only one matching row.
This relationship can be created using Primary key-Unique foreign key constraints.

2. One-Many Relationship (1-M Relationship)
The One-to-Many relationship is defined as a relationship between two tables where a row from one table
can have multiple matching rows in another table. This relationship
can be created using Primary key-Foreign key relationship.

2. Many-Many Relationship (1-M Relationship)
The One-to-Many relationship is defined as a relationship between two tables where
a multiple row from one table can have multiple matching rows in another table. This relationship
can be created using Primary key-Foreign key relationship.

Primary Key	Foreign Key
Primary Key- The primary key consists of one or more columns whose data contained within is
used to uniquely identify each row in the table.
First, as we mentioned, the columns must be unique.
Also, no value in the columns can be blank or NULL.

Foreign Keys
A foreign key is a set of one or more columns in a table that refers to the primary key in
 another table.  There isn’t any special code, configurations, or table definitions you need
to place to officially “designate” a foreign key.

The primary key consists of one or more columns whose data contained within is used to uniquely
identify each row in the table.
Primary key uniquely identify a record in the table. Foreign key is a field in the table that
 is primary key in another table.
Primary Key can't accept null values.	Foreign key can accept multiple null value.
By default, Primary key is clustered index and data in the database table is physically
organized in the sequence of clustered index.
	Foreign key do not automatically create an index, clustered or non-clustered. You can manually
  create an index on foreign key.
We can have only one Primary key in a table.	We can have more than one foreign key in a table.

Where and having-
WHERE and HAVING clause is used to specify filtering condition in SQL,
WHERE is used in any SELECT query, while HAVING clause is only used in SELECT queries,
which contains aggregate function or group by clause
, which is correct.
1) Apart from SELECT queries, you can use WHERE clause with UPDATE and DELETE clause but
HAVING clause can only be used with SELECT query.
2)WHERE clause is used for filtering rows and it applies on each and every row, while
 HAVING clause is used to filter groups in SQL.
3) One syntax level difference between WHERE and HAVING clause is that, former is used
before GROUP BY clause, while later is used after
 GROUP BY clause.
4) When WHERE and HAVING clause are used together in a SELECT query with aggregate function,
WHERE clause is applied first on
individual rows and only rows which pass the condition is included for creating groups. +
Once group is created, HAVING clause is
used to filter groups based upon condition specified.


 .
select salary from employee order by salary desc limit n-1,1;


Difference between SQL and NoSQL

SQL	NOSQL
RELATIONAL DATABASE MANAGEMENT SYSTEM (RDBMS)	== Non-relational or distributed database system.
These databases have fixed or static or predefined schema ==	They have have dynamic schema
These databases are not suited for hierarchical data storage.==	These databases are best suited for hierarchical data storage.
These databases are best suited for complex queries	== These databases are not so good for complex queries
Verticlly Scalable ==	Horizontally scalable

The Main Differences:

Type –
SQL databases are primarily called as Relational Databases (RDBMS); whereas NoSQL database are primarily called as non-relational or distributed database.
Language –
SQL databases defines and manipulates data based structured query language (SQL). Seeing from a side
this language is extremely powerful. SQL is one of the most versatile and widely-used options available which makes it a safe choice especially for great complex queries. But from other side it can be restrictive. SQL requires you to use predefined schemas to determine the structure of your data before you work with it. Also all of your data must follow the same structure. This can require significant up-front preparation which means that a change in the structure would be both difficult and disruptive to your whole system.

A NoSQL database has dynamic schema for unstructured data. Data is stored in many ways which means
it can be document-oriented, column-oriented, graph-based or organized as a KeyValue store.
This flexibility means that documents can be created without having defined structure first.
Also each document can have its own unique structure. The syntax varies from database to database,
 and you can add fields as you go.
The Scalability –
In almost all situations SQL databases are vertically scalable. This means that you can increase the load on a single server by increasing things like RAM, CPU or SSD. But on the other hand NoSQL databases are horizontally scalable. This means that you handle more traffic by sharding, or adding more servers in your NoSQL database. It is similar to adding more floors to the same building versus adding more buildings to the neighborhood. Thus NoSQL can ultimately become larger and more powerful, making these databases the preferred choice for large or ever-changing data sets.
The Structure –
SQL databases are table-based on the other hand NoSQL databases are either key-value pairs, document-based, graph databases or wide-column stores. This makes relational SQL databases a better option for applications that require multi-row transactions such as an accounting system or for legacy systems that were built for a relational structure.
Property followed –
SQL databases follow ACID properties (Atomicity, Consistency, Isolation and Durability) whereas the NoSQL database follows the
 Brewers CAP theorem (Consistency, Availability and Partition tolerance).
Support –
Great support is available for all SQL database from their vendors. Also a lot of independent consultations are
 there who can help you with SQL database for a very large scale deployments but for som
 e NoSQL database you still have to rely on community support and only limited outside experts are available
  for setting up and deploying your large scale NoSQL deployments.

Some examples of SQL databases include PostgreSQL, MySQL, Oracle and Microsoft SQL Server. NoSQL database examples
include Redis, RavenDB Cassandra, MongoDB, BigTable, HBase, Neo4j and CouchDB.
=====
temp table=
A temporary table in SQL Server, as the name suggests, is a database table that exists temporarily on
 the database server. A temporary table stores a subset of data from a normal table for a certain
 period of time.

Temporary tables are particularly useful when you have a large number of records in a table and
you repeatedly need to interact with a small subset of those records. In such cases instead of
 filtering the data again and again to fetch the subset, you can filter the data once and store
 it in a temporary table. You can then execute your queries on that temporary table. Temporary
  tables are stored inside “tempdb” which is a system database. Let’s take a look at how you can
   use a temporary data in a simple scenario.

   SELECT name, age, gender
INTO #MaleStudents
FROM student
WHERE gender = 'Male'

=====
SQL | Views
Views in SQL are kind of virtual tables. A view also has rows and columns as they are
in a real table in the database. We can create a view by selecting fields from one or
more tables present in the database. A View can either have all the rows of a table or
 specific rows based on certain condition.


 CREATE VIEW view_name AS
 SELECT column1, column2.....
 FROM table_name
 WHERE condition;

 There are certain conditions needed to be satisfied to update a view. If any one of
 these conditions is not met, then we will not be allowed to update the view.

 The SELECT statement which is used to create the view should not include GROUP BY
 clause or ORDER BY clause.
 The SELECT statement should not have the DISTINCT keyword.
 The View should have all NOT NULL values.
 The view should not be created using nested queries or complex queries.
 The view should be created from a single table. If the view is created using multiple
 tables then we will not be allowed to update the view.

 Question: Can you update the data in a SQL VIEW?

 Answer: A VIEW in SQL is created by joining one or more tables. When you update
  record(s) in a view, it updates the records in the underlying tables that make up the SQL View.

 So, yes, you can update the data in a SQL VIEW providing you have the proper
  privileges to the underlying SQL tables.
=====
Normalization
Normalization is the process of organizing the data in the database.
Normalization is used to minimize the redundancy and dependancy from a relation or set of relations.
 It is also used to eliminate the undesirable characteristics like Insertion, Update
 and Deletion Anomalies.
Normalization divides the larger table into the smaller table and links
them using relationship.
The normal form is used to reduce redundancy from the database table.
1NF	A relation is in 1NF if it contains an atomic value.
2NF	A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.
3NF	A relation will be in 3NF if it is in 2NF and no transition dependency exists.
4NF	A relation will be in 4NF if it is in Boyce Codd normal form and has no multi-valued dependency.
5NF	A relation is in 5NF if it is in 4NF and not contains any join dependency and joining should be lossless.
==
ACID properties
Atomic – In a transaction with two or move pieces of information, either all the information is
committed to save, or none is saved.  Essentially, an “all or nothing” rule is followed.
Consistent – The data saved can’t violate any of the database’s integrity.
Interrupted changes are rolled back to ensure the database is placed in a state prior to the change.
Isolation – The transaction in question is not affected by any other transactions
taking place.  This avoids “mid-air collisions.”
Durable – Once the transaction is committed, any failure or system restart,
 returns the data in a correct state.  Stated another way, once a transaction is
  committed, it will remain so, regardless of a subsequent system failure.
===

cursor
In this chapter, we will discuss the cursors in PL/SQL. Oracle creates a memory area,
 known as the context area, for processing an SQL statement, which contains all the
 information needed for processing the statement; for example, the number of rows processed, etc.

A cursor is a pointer to this context area. PL/SQL controls the context area through a cursor.
A cursor holds the rows (one or more) returned by a SQL statement. The set of rows the cursor
holds is referred to as the active set.

You can name a cursor so that it could be referred to in a program to fetch and process
the rows returned by the SQL statement, one at a time. There are two types of cursors −
===
finding duplicate values
SELECT username, email, COUNT(*)
FROM users
GROUP BY username, email
HAVING COUNT(*) > 1
======
if then else statements
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN "The quantity is greater than 30"
    WHEN Quantity = 30 THEN "The quantity is 30"
    ELSE "The quantity is under 30"
END AS QuantityText
FROM OrderDetails;
====


What is DEFAULT?

Default allows to add values to the column if the value of that column is not set. Default can
be defined on number and datetime fields. They cannot be defined on timestamp and IDENTITY columns.
===
Diff- UNION AND Join
UNION-
Definition of UNION
UNION is a set operation in SQL. UNON combines the result of two queries. The result of
UNION includes the tuples from both the relations present in the query. The conditions
that must be satisfied take the UNION of two relations are:

The two relations must have the same number of attributes.
The domains of the corresponding attribute must be same.
There are two types of UNION that are UNION and UNION ALL.
 The result obtained using UNION do not include duplicates.
 On the other hand, the result obtained using UNION ALL retains duplicate.

 Definition of JOIN
JOIN clause in SQL combines the tuples from two relations or tables resulting in a
longer tuple size. The resultant tuple contains attributes from both the relation.
 Attributes are combined based on the common attributes between them. The different
 types of JOIN in SQL are INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN.
==
Delete and Truncate and Drop
1. truncate
Removes All rows from a table.
Does not require a WHERE clause, so you can not filter rows while Truncating.
5. No Triggers are fired on this operation because it does not operate on individual rows.
This command will temporarily delete the data from database.
Before commit operation ,if we roll back we will get the data.

2.delete 1. Removes Some or All rows from a table based on where .
Delete is DML, Truncate is DDL
But in reality both DELETE and TRUNCATE operations can be COMMITTED
 AND ROLL-BACKED if provided inside a Transaction.
 This command will permanently delete the data from database.
If we roll back also we won’t get the data.
Delete does not recover space, Truncate recovers space
Delete can be used to remove all rows or only a subset of rows. Truncate removes all rows.
Delete can be granted on a table to another user or role, but truncate cannot be without
using a DROP ANY TABLE grant.


Drop-
DROP:

This command will completely destroy table from database.
command: sql>drop table <table_name>

DELETE CASCADE
ON DELETE CASCADE specifies constraint option. In your case (suppose you have table_x and table_y
that depends on table_x) when you delete row in table_x and this row is referenced from table_y,
row from table_x would be deleted and all rows that referenced this row in table_y would be deleted as well.
====



Q9: What is blocking?
           Junior

SQL Server blocking occurs when one connection holds a lock on a record and other connection tries
to fetch the record or update the record.

====
What’s the difference between a local temp table and a global temp table?
    Local tables are accessible to a current user connected to the server.
    These tables disappear once the user has disconnected from the server.
    Global temp tables, on the other hand, are available to all users regardless
     of the connection. These tables stay active until all the global connections are closed.

=====

Normalization

2NF
For a table to be in the Second Normal Form, it must satisfy two conditions:
Now as we just discussed that the primary key for this table is a composition of two columns
which is student_id & subject_id but the teacher's name only depends on subject, hence the
subject_id, and has nothing to do with student_id.

This is Partial Dependency, where an attribute in a table depends on only a part of the
 primary key and not on the whole key.

The table should be in the First Normal Form.
There should be no Partial Dependency.

3NF
It should be in the Second Normal form.
And it should not have Transitive Dependency.
But, exam_name is just another column in the score table. It is not a primary key or even a part of the primary key, and total_marks depends on it
This is Transitive Dependency. When a non-prime attribute depends on other non-prime attributes rather than depending upon the prime attributes or primary key.

BCNF Boyce COde
For a table to satisfy the Boyce-Codd Normal Form, it should satisfy the following two conditions:

It should be in the Third Normal Form.
And, for any dependency A → B, A should be a super key.
The second point sounds a bit tricky, right? In simple words, it means, that for a dependency
 A → B, A cannot be a non-prime attribute, if B is a prime attribute.

4NF
It should be in the Boyce-Codd Normal Form.
And, the table should not have any Multi-valued Dependency
What is Multi-valued Dependency?
A table is said to have multi-valued dependency, if the following conditions are true,

For a dependency A → B, if for a single value of A, multiple value of B exists, then the table may have multi-valued dependency.
Also, a table should have at-least 3 columns for it to have a multi-valued dependency.
And, for a relation R(A,B,C), if there is a multi-valued dependency between, A and B, then B and C should be independent of each other.
If all these conditions are true for any relation(table), it is said to have multi-valued dependency.

SET Operations in SQL
SQL supports few Set operations which can be performed on the table data. These are used to get meaningful results from data stored in the table, under different special conditions.
UNION
UNION ALL
INTERSECT
MINUS


JOins vs UNION

Joins and Unions can be used to combine data from one or more tables. The difference lies in how the data is combined.

In simple terms, joins combine data into new columns. If two tables are joined together,
 then the data from the first table is shown in one set of column alongside the second table’s column in the same row.

Unions combine data into new rows. If two tables are “unioned” together, then the data from the f
irst table is in one set of rows, and the data from the second table in another set. The rows are in the same result.

Keys
Super Key
Super Key is defined as a set of attributes within a table that can uniquely identify each record within a table. Super Key is a superset of Candidate key.

Candidate Key
Candidate keys are defined as the minimal set of fields which can uniquely identify each record in a table. It is an attribute or a set of attributes that can act as a Primary Key for a table to uniquely identify each record in that table. There can be more than one candidate key.

Primary Key
Primary key is a candidate key that is most appropriate to become the main key for any table. It is a key that can uniquely identify each record in a table.

Composite Key
Key that consists of two or more attributes that uniquely identify any record in a table is called Composite key. But the attributes which together form the Composite key are not a key independentely or individually.

Secondary or Alternative key
The candidate key which are not selected as primary key are known as secondary keys or alternative keys.

Non-key Attributes
Non-key attributes are the attributes or fields of a table, other than candidate key attributes/fields in a table.

Non-prime Attributes
Non-prime Attributes are attributes other than Primary Key attribute(s)..

====
postgres vs mysql=

pg - The world’s most advanced open source database
my- The world’s most popular open source database

No TEMP or TEMPORARY keyword in DROP TABLE statement
MySQL supports the TEMP or TEMPORARY keyword in the DROP TABLE statement that allows you to remove the temporary table only.

Support CASCADE option to drop table’s dependent objects e.g., tables, views, etc
Does not support CASCADE option

Support many advanced types such as array, hstore, and user-defined type.
SQL-standard types

programming language for stored procedure
Ruby, Perl, Python, TCL, PL/pgSQL, SQL, JavaScript, etc.
SQL:2003 syntax for stored procedures

 FULL OUTER JOIN
 yes
 no

 Partial indexes
 yes
 no



   here MySQL is the product of Oracle Corporation and PostgreSQL is the product of Global
   Development Group.
postgres is free/opensource
   Key Differences Between MySQL and PostgreSQL
   The architectural difference between MySQL and PostgreSQL is that MySQL
    is a relational database management system whereas,
    PostgresSQL is object-relational database management system.
   MySQL is supported by the following operating system, Windows, Mac OS X, Linux, BSD, UNIX,
   z/OS, Symbian, AmigaOS.
   However, the PostgreSQL  is supported by Windows, Mac OS X, Linux
    and BSD but not by UNIX, z/OS, Symbian, AmigaOS.
   MySQL is the product of Oracle Corporation while PostgreSQL is a product of Global Development Group.
   My SQL programming language is not extensible whereas, the programming language PostgreSQL is highly extensible.
   In MySQL, the phpMyAdmin tool provides GUI and SQL interface. However,
    in PostgreSQL, the pgAdmin tool provides GUI and SQL interface.
   In MySQL, Mysqldump, and XtraBackup tools provides backup. On the other hands,
   PostgresSQL provides complete backup online.
   MySQL provides temporary tables but does not provide materialized view.
   However, PostgreSQL provides temporary table and also the materialized view.
   MySQL does not offers data domain object whereas, PostgreSQL provide data domain object.
   ===
sql vs mysql

SQL stands for Structured Query Language. It’s a standard language for accessing and manipulating databases.
MySQL is a database management system, like SQL Server, Oracle, Informix, Postgres, etc. MySQL is a RDMS (Relational Database Management System).

MYSQL available for free since it is open source, But SQL is not open source.

User defined functions are not supported in MYSQL, But supported in SQL.

Transaction support is very much limited in MYSQL, But extensively and fully offered in SQL.

	sql - To query and operate database system.
  mysql- Allows data handling, storing, modifying, deleting in a tabular format.
